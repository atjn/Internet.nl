services:
  # networks during tests are cut off from the outside to provide isolated test results
  # to provide some debugging possibilities this container is used to expose some ports
  # from the internal network to the outside
  port-expose:
    image: alpine/socat
    command: TCP-LISTEN:8081,reuseaddr,fork TCP:webserver:80
    networks:
      - public-internet
      - port-expose
    ports:
      - 8081:8081

  app:
    dns: $IPV4_IP_RESOLVER_INTERNAL
    # TODO: does this solve issues with slow tests on Github Actions?
    dns_search: []
    dns_opt: ["ndots:0", "timeout:1", "attempts:1"]
  worker:
    dns: $IPV4_IP_RESOLVER_INTERNAL
    # TODO: does this solve issues with slow tests on Github Actions?
    dns_search: []
    dns_opt: ["ndots:0", "timeout:1", "attempts:1"]

  rabbitmq:
    networks:
      - internal
      - public-internet
    ports:
      # expose admin GUI to localhost
      - $RABBITMQ_GUI

  test-target:
    image: nginx

    networks:
      public-internet:
        ipv4_address: $IPV4_IP_TEST_TARGET_PUBLIC
        ipv6_address: $IPV6_IP_TEST_TARGET_PUBLIC

    ports:
      - 80
      - 443

    volumes:
      - ../integration_tests/nginx_templates/:/etc/nginx/templates/
      - ../integration_tests/pki:/etc/pki/
      - ../integration_tests/www:/var/www/

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: $HEALTHCHECK_INTERVAL
      retries: 30

  mail-test-target:
    image: mailhog/mailhog

    networks:
      public-internet:
        ipv4_address: $IPV4_IP_TEST_TARGET_MAIL_PUBLIC
        ipv6_address: $IPV6_IP_TEST_TARGET_MAIL_PUBLIC

    ports:
      - 25

    environment:
      MH_SMTP_BIND_ADDR: 0.0.0.0:25

    # healthcheck:
    #   test: ["CMD", "nc", "localhost", "25"]
    #   interval: $HEALTHCHECK_INTERVAL
    #   retries: 30

  test-runner:
    image: $DOCKER_IMAGE_TEST_RUNNER
    build:
      context: ..
      dockerfile: docker/Dockerfile.test-runner
    # don't run anything, just make this container available to run tests in on demand
    command: python3 -m pytest -v integration_tests/integration/
    networks:
      public-internet:
      internal:
    volumes:
      - ../:/source
      # make docker available inside the container
      - /var/run/docker.sock:/var/run/docker.sock
    profiles:
      - run-tests
    dns: $IPV4_IP_RESOLVER_INTERNAL

  resolver:
    image: strm/dnsmasq

    entrypoint: /entrypoint.sh

    networks:
      internal:
        ipv4_address: $IPV4_IP_RESOLVER_INTERNAL

    ports:
      - "53/udp"

    environment:
      - IPV4_IP_UNBOUND_INTERNAL
      - CONN_TEST_DOMAIN
      - INTERNETNL_DOMAINNAME
      - IPV4_WEBSERVER_IP_PUBLIC
      - TEST_TARGET_DOMAINNAME
      - IPV4_IP_TEST_TARGET_PUBLIC
      - IPV6_IP_TEST_TARGET_PUBLIC
      - IPV4_IP_TEST_TARGET_MAIL_PUBLIC
      - IPV6_IP_TEST_TARGET_MAIL_PUBLIC

    volumes:
      - ../integration_tests/dnsmasq/entrypoint.sh:/entrypoint.sh

    cap_add:
      - NET_ADMIN

  webserver:
    networks:
      public-internet:
        ipv6_address: $IPV6_IP_PUBLIC
        ipv4_address: $IPV4_WEBSERVER_IP_PUBLIC

  unbound:
    networks:
      public-internet:
        ipv4_address: $IPV4_UNBOUND_IP_PUBLIC

networks:
  # network that is not internet to expose internal ports for debugging purposes
  port-expose:
    internal: false
    driver: bridge

  public-internet:
    # make public network internal as well to run tests isolated from the internet
    internal: true
    # required to enable IPv6 on Docker Desktop runtime
    enable_ipv6: true
    driver: bridge
    driver_opts:
      # required to enable IPv6 on Colima Docker runtime
      com.docker.network.enable_ipv6: "true"
      # network for internal communication between services
      com.docker.network.bridge.enable_icc: "true"
    ipam:
      driver: default
      config:
      - subnet: $IPV6_SUBNET_PUBLIC
        gateway: $IPV6_GATEWAY_PUBLIC
      - subnet: $IPV4_SUBNET_PUBLIC
