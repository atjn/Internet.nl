name: Internet.nl

env:
  DOCKER_IMAGE: ghcr.io/internetstandards/internet.nl:develop
  RELEASE_IMAGE: ghcr.io/internetstandards/internet.nl:latest

on:
  pull_request:
  push:
    branches:
      - main
      - release/*


jobs:
  integration-test:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        # don't need to test multiple versions since everything runs in Docker,
        # but keep consistent with rest of the jobs
        python-version: [ "3.9" ]
    steps:
      - uses: actions/checkout@v3
        # include vendor/ submodules used to build dependencies like nassl and unbound
        with:
          submodules: recursive

      # login to pull images from Github registry
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # https://docs.docker.com/build/cache/backends/gha/
      - name: Switch to caching Docker driver
        run: docker buildx create --use --driver=docker-container

      - name: Prefetch docker-compose dependencies in background
        run: make docker-compose-pull-dependencies &

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Make venv
        run: make venv
      - name: Start test instance
        run: make docker-compose-up
      - name: Run integration tests
        # run integration tests against test instance (which has empty project name)
        run: make integration-tests-against-develop
      - name: Stop test instance
        run: make docker-compose-down-remove-volumes &

  live-test:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        # don't need to test multiple versions since everything runs in Docker,
        # but keep consistent with rest of the jobs
        python-version: [ "3.9" ]
    steps:
      - uses: actions/checkout@v3
        # include vendor/ submodules used to build dependencies like nassl and unbound
        with:
          submodules: recursive

      # login to pull images from Github registry
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # https://docs.docker.com/build/cache/backends/gha/
      - name: Switch to caching Docker driver
        run: docker buildx create --use --driver=docker-container

      - name: Prefetch docker-compose dependencies in background
        run: make docker-compose-pull-dependencies &

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Make venv
        run: make venv
      - name: Run live tests
        run: make live-tests


  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    env:
      GITHUB_ACTIONS: True
      ENABLE_BATCH: True
      SECRET_KEY: Github
      DEBUG: True
      DB_NAME: internetnl
      DB_USER: internetnluser
      DB_PASSWORD: internetnluser
    strategy:
      matrix:
        # Support Matrix from python.org/downloads:
        # 3.7, 2023-06-27
        # 3.8, 2024-10
        # 3.9, 2025-10
        # 3.10 2026-10
        python-version: [ 3.7, "3.10" ]
    continue-on-error: false

    services:
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 15672:15672
          - 5672:5672
      postgres:
        image: postgres:12.5
        env:
          POSTGRES_DB: internetnl
          POSTGRES_USER: internetnluser
          POSTGRES_PASSWORD: internetnluser
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 2

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run Redis 6
        uses: supercharge/redis-github-action@1.4.0
        with:
          redis-version: 6
      - name: Install needed packages for build and run
        run: |
          sudo apt update
          sudo apt-get update
          sudo apt-get -y install libevent-dev libssl-dev libffi-dev python-dev swig libhiredis-dev
      - name: Check out cache (only if match on OS, Python version, requirements, Makefile and workflow file)
        uses: actions/cache@v3
        id: cache-venv
        with:
          # Prevent re-building the venv when all requirements.txts stays the same.
          path: |
            ./.venv/
            ./unbound/
            ./_unbound/
            ./nassl_freebsd/
          key: ${{ runner.os }}-${{ matrix.python-version }}-v5-venv-and-deps-${{ hashFiles('**/requirements*.txt', 'Makefile', '.github/workflows/*') }}
      # the venv and all (slow) custom dependencies is only built when there was no cache hit.
      - name: Setup Application Configuration
        run: |
          cp ./internetnl/settings-dist.py ./internetnl/settings.py
      - name: Make venv (if not from cache)
        run: make venv
        if: ${{ steps.cache-venv.outputs.cache-hit != 'true' }}
      - name: Make nassl (if not from cache)
        run: make nassl
        if: ${{ steps.cache-venv.outputs.cache-hit != 'true' }}
      - name: Make unbound (if not from cache)
        run: make unbound-${{ matrix.python-version }}-github
        if: ${{ steps.cache-venv.outputs.cache-hit != 'true' }}
      - name: Check linting
        run: make check
        env:
          GITHUB_ACTIONS: True
      - name: Run tests
        run: make test
        env:
          GITHUB_ACTIONS: True
          ENABLE_BATCH: True
          SECRET_KEY: Github
          DEBUG: True
          DB_NAME: internetnl
          DB_USER: internetnluser
          DB_PASSWORD: internetnluser
      - name: Verify if Build API documentation command works (needs /static/ dir to exist)
        run: |
          mkdir -p static
          make manage api_generate_doc
